'use client';

import React, { useEffect, useRef, useState, useCallback } from "react";
import StreamingAvatar, {
  AvatarQuality,
  StreamingEvents,
  TaskMode,
  TaskType,
  VoiceEmotion,
} from "@heygen/streaming-avatar";
import { getHeygenAvatarId, getFallbackAvatar, getValidatedAvatarId } from '@/config/agents';

// Define missing types for compatibility
const VoiceChatTransport = {
  WEBSOCKET: "websocket",
  WEBRTC: "webrtc"
} as const;

// Define missing event types for TypeScript
type ExtendedEventType = typeof StreamingEvents & {
  STREAM_CONNECTED: string;
  USER_START: string;
  USER_STOP: string;
};

const StreamingEventsExtended: ExtendedEventType = {
  ...StreamingEvents,
  STREAM_CONNECTED: "stream_connected",
  USER_START: "user_start",
  USER_STOP: "user_stop"
} as const;

interface InteractiveAvatarProps {
  onAvatarReady?: () => void;
  avatarRef?: React.MutableRefObject<StreamingAvatar | null>;
  enabled?: boolean;
  sessionId?: string;
  voiceEnabled?: boolean;
  avatarId?: string;
  onAvatarError?: (error: string) => void;
  avatarTimeout?: number;
}

const InteractiveAvatar: React.FC<InteractiveAvatarProps> = ({ 
  onAvatarReady, 
  avatarRef, 
  enabled = true,
  sessionId,
  voiceEnabled = true,
  avatarId = 'presaleskb',
  onAvatarError,
  avatarTimeout = 10000 // 10 seconds default timeout
}) => {
  const [stream, setStream] = useState<MediaStream>();
  const [isLoadingSession, setIsLoadingSession] = useState(false);
  const mediaStream = useRef<HTMLVideoElement>(null);
  const localAvatarRef = useRef<StreamingAvatar | null>(null);
  const [sessionActive, setSessionActive] = useState(false);
  const tokenRef = useRef<string>("");
  const [error, setError] = useState<string | null>(null);
  const [errorType, setErrorType] = useState<string | null>(null);
  const currentSessionIdRef = useRef<string | undefined>(sessionId);
  const currentAvatarIdRef = useRef<string>(avatarId);
  const [avatarFailed, setAvatarFailed] = useState(false);
  
  // Reference for WebSocket check interval
  const wsIntervalRef = useRef<NodeJS.Timeout | null>(null);
  
  // Flag to track if voice chat is active
  const voiceChatActiveRef = useRef<boolean>(false);
  
  // Track session start time and duration for credit optimization
  const sessionStartTimeRef = useRef<number | null>(null);
  const sessionMonitorIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const maxSessionDurationMs = 5 * 60 * 1000; // 5 minutes max session duration
  const lastInitAttemptTime = useRef<number | null>(null);
  const avatarTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const [showFallback, setShowFallback] = useState(false);
  const [isInitializing, setIsInitializing] = useState(false);
  const [sessionCleanupInProgress, setSessionCleanupInProgress] = useState(false);
  const [avatarReadyState, setAvatarReadyState] = useState<'idle' | 'initializing' | 'ready' | 'failed'>('idle');
  const initializationAttemptRef = useRef<number>(0);
  const isCleaningUpRef = useRef<boolean>(false);
  const cleanupTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const lastInitAttemptTime = useRef<number | null>(null);

  const actualAvatarRef = avatarRef || localAvatarRef;

  // Get the actual HeyGen avatar ID with validation
  const heygenAvatarId = getValidatedAvatarId(avatarId);
  
  // Get the appropriate fallback image
  const fallbackImagePath = getFallbackAvatar(avatarId);

  async function fetchAccessToken() {
    try {
      const response = await fetch("/api/get-access-token", {
        method: "POST",
      });
      const token = await response.text();
      tokenRef.current = token;
      return token;
    } catch (error: any) {
      console.error("‚ùå Error fetching access token:", error);
      return "";
    }
  }

  async function startAvatarSession() {
    if (!enabled) return;
    
    // Prevent multiple simultaneous sessions
    if (isInitializing || sessionCleanupInProgress) {
      console.log("Avatar already initializing or cleanup in progress, skipping...");
      return;
    }
    
    // Log credit usage information
    console.log("üí∞ Starting new HeyGen session with credit optimization enabled");
    
    // Add debouncing - if called again within 500ms, ignore
    const now = Date.now();
    if (lastInitAttemptTime.current && (now - lastInitAttemptTime.current) < 500) {
      console.log("Ignoring rapid initialization attempt (debounced)");
      return;
    }
    lastInitAttemptTime.current = now;
    
    // Increment attempt counter for this initialization
    const currentAttempt = ++initializationAttemptRef.current;
    console.log(`üöÄ Starting avatar session attempt #${currentAttempt}`);
    
    console.log(`Starting avatar session with timeout: ${avatarTimeout}ms`);
    setIsInitializing(true);
    setIsLoadingSession(true);
    setError(null);
    setErrorType(null);
    setAvatarFailed(false);
    setShowFallback(false);
    setAvatarReadyState('initializing');
    
    // Ensure any existing session is completely ended first
    if (actualAvatarRef.current || sessionActive) {
      console.log("üîÑ Ending existing session before starting new one...");
      await endSession();
      
      // Add a longer delay to ensure HeyGen resources are fully released
      console.log("‚è±Ô∏è Waiting for HeyGen resources to be released...");
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // Set timeout for avatar initialization
    avatarTimeoutRef.current = setTimeout(() => {
      console.error(`‚è∞ Avatar timeout after ${avatarTimeout}ms - ${avatarId} (${heygenAvatarId})`);
      console.error(`   Session: ${sessionId}`);
      console.error(`   Attempt: ${currentAttempt}`);
      handleAvatarFailure(`Avatar loading timed out after ${avatarTimeout}ms`);
    }, avatarTimeout);
    
    try {
      // Always fetch a fresh token for each new session
      const token = await fetchAccessToken();
      if (!token) {
        throw new Error("Failed to obtain access token");
      }
      tokenRef.current = token;
  
      // Always create a new StreamingAvatar instance with fresh token
      try {
        // Ensure no existing instance
        if (actualAvatarRef.current) {
          console.log("‚ö†Ô∏è Found existing avatar instance during initialization - cleaning up");
          actualAvatarRef.current = null;
          await new Promise(resolve => setTimeout(resolve, 500));
        }
        
        actualAvatarRef.current = new StreamingAvatar({
          token: tokenRef.current,
        });
        
        // Set up event listeners
        console.log("üîß Setting up avatar event listeners...");
        
        // Add stream-ready event listener using StreamingEvents enum
        actualAvatarRef.current.on(StreamingEvents.STREAM_READY, (event: any) => {
          console.log("üé• Stream ready event received:", event);
          
          // The MediaStream is in event.detail
          const mediaStreamObj = event.detail;
          
          // Validate session is still current before processing
          if (currentSessionIdRef.current === sessionId && currentAvatarIdRef.current === avatarId) {
            console.log("üé• Setting stream state with MediaStream object", mediaStreamObj);
            setStream(mediaStreamObj);
            console.log("üé• Stream state updated, avatar should now be visible");
            
            // Ensure video element is properly set up
            if (mediaStream.current && mediaStreamObj) {
              try {
                console.log("üìπ Setting video srcObject with MediaStream", typeof mediaStreamObj);
                mediaStream.current.srcObject = mediaStreamObj;
                mediaStream.current.play().catch(err => {
                  console.error("Error playing video:", err);
                });
              } catch (err) {
                console.error("‚ùå Error setting srcObject:", err);
              }
            }
          } else {
            console.log("‚ö†Ô∏è Ignoring stream-ready event for outdated session");
          }
        });
        
        // Add more event listeners for debugging
        actualAvatarRef.current.on(StreamingEvents.AVATAR_START_TALKING, () => console.log("üó£Ô∏è Avatar started talking"));
        actualAvatarRef.current.on(StreamingEvents.AVATAR_STOP_TALKING, () => console.log("ü§´ Avatar stopped talking"));
        actualAvatarRef.current.on(StreamingEvents.STREAM_DISCONNECTED, () => console.log("üîî Stream disconnected"));
        
        // Extended events
        actualAvatarRef.current.on(StreamingEventsExtended.STREAM_CONNECTED, () => console.log("üîó Stream connected"));
        actualAvatarRef.current.on(StreamingEventsExtended.USER_START, () => console.log("üë§ User start"));
        actualAvatarRef.current.on(StreamingEventsExtended.USER_STOP, () => console.log("üë§ User stop"));
      } catch (initError) {
        console.error("Avatar initialization error:", initError);
        handleAvatarFailure("Failed to initialize avatar");
        return;
      }
  
      try {
        // Use a credit-optimized avatar configuration
        const avatarConfig: any = {
          quality: AvatarQuality.Low, // Use lowest quality to save credits
          avatarName: heygenAvatarId, // Use the actual avatar ID
          voice: {
            rate: 1.0,
            emotion: VoiceEmotion.NEUTRAL
          },
          language: "en",
          disableIdleTimeout: false, // Enable idle timeout to auto-close inactive sessions
          idleTimeoutMs: 30000, // Close session after 30 seconds of inactivity
          test: false // IMPORTANT: Set test=false to use production credits instead of test credits
        };
        
        // Track session start time for credit optimization
        sessionStartTimeRef.current = Date.now();
        
        // Set up session monitoring for credit optimization
        if (sessionMonitorIntervalRef.current) {
          clearInterval(sessionMonitorIntervalRef.current);
        }
        
        sessionMonitorIntervalRef.current = setInterval(() => {
          if (sessionStartTimeRef.current && (Date.now() - sessionStartTimeRef.current > maxSessionDurationMs)) {
            console.log(`üí∞ Credit optimization: Session running for ${maxSessionDurationMs/60000} minutes - restarting to prevent excessive credit usage`);
            endSession().then(() => {
              if (enabled) {
                setTimeout(() => startAvatarSession(), 1000); // Restart after a delay
              }
            });
          }
        }, 60000); // Check every minute
        
        console.log(`üé¨ Starting avatar for ${avatarId}:`, avatarConfig);
        console.log(`   HeyGen Avatar ID: ${heygenAvatarId}`);
        console.log(`   Session: ${sessionId}`);
        console.log(`   Attempt: #${currentAttempt}`);
        
        const result = await actualAvatarRef.current.createStartAvatar(avatarConfig);
        console.log(`‚úÖ Avatar start successful for ${avatarId}:`, result);
        
        // Wait for WebSocket connection to be fully established
        console.log("‚è±Ô∏è Waiting for WebSocket connection to be ready...");
        await new Promise(resolve => setTimeout(resolve, 3000)); // Increased to 3 seconds
        
        // Temporarily disable voice chat to isolate stream display issues
        console.log("üîá Voice chat temporarily disabled for debugging");
        /*
        // Only start voice chat if voice is enabled
        if (voiceEnabled) {
          try {
            console.log("üé§ Starting voice chat...");
            await actualAvatarRef.current?.startVoiceChat({
              useSilencePrompt: false
            });
            console.log("‚úÖ Voice chat started successfully");
          } catch (error) {
            console.error("‚ùå Failed to start voice chat:", error);
          }
        }
        */
  
        // Clear timeout on success
        if (avatarTimeoutRef.current) {
          clearTimeout(avatarTimeoutRef.current as NodeJS.Timeout);
          avatarTimeoutRef.current = null;
        }
        
        // Avatar started successfully, update state
        setSessionActive(true);
        currentSessionIdRef.current = sessionId;
        currentAvatarIdRef.current = avatarId;
        setIsLoadingSession(false);
        setIsInitializing(false);
        setAvatarReadyState('ready');
  
        console.log(`‚úÖ Avatar successfully initialized (attempt #${currentAttempt})`);
        if (onAvatarReady) {
          onAvatarReady();
        }
      } catch (avatarError: any) {
        console.error("Error starting avatar session:", avatarError);
        
        // Handle specific API errors
        if (avatarError.message && avatarError.message.includes('400')) {
          console.error("400 Error Details:", {
            error: avatarError,
            avatarId: heygenAvatarId,
            token: tokenRef.current ? 'Present' : 'Missing',
            responseText: avatarError.responseText || 'No response text',
            config: {
              quality: AvatarQuality.Low,
              avatarName: heygenAvatarId, // Use the actual avatar ID
              voice: {
                rate: 1.0,
                emotion: VoiceEmotion.NEUTRAL
              },
              language: "en",
              disableIdleTimeout: false, // Enable idle timeout to save credits
          idleTimeoutMs: 30000, // Close session after 30 seconds of inactivity
          test: false, // Use production credits
            }
          });
          
          // Check for concurrent limit error specifically
          if (avatarError.responseText && avatarError.responseText.includes('Concurrent limit reached')) {
            console.log("üö´ Concurrent limit reached - cleaning up existing sessions and retrying...");
            
            // Force cleanup of any existing sessions
            await endSession();
            
            // Wait longer for HeyGen to release resources
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            // Try one more time with a fresh token
            tokenRef.current = "";
            console.log("üîÑ Retrying after concurrent limit cleanup...");
            
            try {
              // Get fresh token
              const tokenResponse = await fetch('/api/get-access-token');
              if (!tokenResponse.ok) {
                throw new Error('Failed to fetch fresh token');
              }
              const tokenData = await tokenResponse.json();
              tokenRef.current = tokenData.token;
              
              // Reinitialize avatar with fresh token
              actualAvatarRef.current = new StreamingAvatar({
                token: tokenRef.current,
              });
              // Set up event listeners
              console.log("üîß Setting up avatar event listeners for retry...");
              
              // Add stream-ready event listener using StreamingEvents enum
              actualAvatarRef.current.on(StreamingEvents.STREAM_READY, (event: any) => {
                console.log("üé• Stream ready event received:", event);
                
                // The MediaStream is in event.detail
                const mediaStreamObj = event.detail;
                
                // Validate session is still current before processing
                if (currentSessionIdRef.current === sessionId && currentAvatarIdRef.current === avatarId) {
                  console.log("üé• Setting stream state with MediaStream object", mediaStreamObj);
                  setStream(mediaStreamObj);
                  console.log("üé• Stream state updated, avatar should now be visible");
                }
              });
              
              // Add more event listeners for debugging
              actualAvatarRef.current.on(StreamingEvents.AVATAR_START_TALKING, () => console.log("üó£Ô∏è Avatar started talking"));
              actualAvatarRef.current.on(StreamingEvents.AVATAR_STOP_TALKING, () => console.log("ü§´ Avatar stopped talking"));
              actualAvatarRef.current.on(StreamingEvents.STREAM_DISCONNECTED, () => console.log("üîî Stream disconnected"));
              
              // Try again with the same config
              const retryResponse = await actualAvatarRef.current.createStartAvatar({
                avatarName: avatarId,
                quality: AvatarQuality.Low,
                voice: {
                  rate: 1.0,
                  emotion: VoiceEmotion.NEUTRAL
                }
              });
            } catch (error) {
              console.error('‚ùå Avatar retry failed:', error);
              handleAvatarFailure(error);
            }
          }, avatarTimeout);
        }
      } catch (error) {
        console.error('‚ùå Avatar initialization failed:', error);
        handleAvatarFailure(error);
      }
    }
  };

  // Handle avatar failures consistently
  const handleAvatarFailure = (error: any) => {
    console.error('‚ùå Avatar failure:', error);
    setAvatarFailed(true);
    setError(error?.message || 'Avatar initialization failed');
    setErrorType('avatar_failure');
    if (onAvatarError) {
      onAvatarError(error?.message || 'Avatar initialization failed');
    }
  };

  // End session and clean up resources to save credits
  const endSession = async () => {
    console.log('üí∞ Ending session to save credits');
    
    // Clear monitoring interval
    if (sessionMonitorIntervalRef.current) {
      clearInterval(sessionMonitorIntervalRef.current);
      sessionMonitorIntervalRef.current = null;
    }
    
    // Stop voice chat if active
    if (voiceChatActiveRef.current && localAvatarRef.current) {
      try {
        // Cast to any to access undocumented method
        (localAvatarRef.current as any).stopVoiceChat();
        console.log('üîá Voice chat stopped');
        voiceChatActiveRef.current = false;
      } catch (err) {
        console.error('‚ùå Error stopping voice chat:', err);
      }
    }
    
    // Clean up avatar instance
    if (localAvatarRef.current) {
      try {
        await localAvatarRef.current.destroy();
        console.log('üßπ Avatar instance destroyed');
      } catch (err) {
        console.error('‚ùå Error destroying avatar:', err);
      }
      localAvatarRef.current = null;
    }
    
    // Reset state
    setSessionActive(false);
    setStream(undefined);
    console.log('üèÅ Session cleanup complete');
  };

  // Consolidated initialization effect with debouncing and credit optimization
  useEffect(() => {
    let timeoutId: NodeJS.Timeout;
    
    const shouldReinitialize = 
    enabled && (
      sessionId !== currentSessionIdRef.current ||
      currentAvatarIdRef.current !== avatarId
    );
  
  if (shouldReinitialize) {
    console.log(`üîÑ Change detected - Session: ${currentSessionIdRef.current} ‚Üí ${sessionId}, Avatar: ${currentAvatarIdRef.current} ‚Üí ${avatarId}`);
    
    // Debounce multiple rapid changes to avoid unnecessary sessions
    timeoutId = setTimeout(async () => {
      // Always end previous session first to save credits
      await endSession();
      
      // Only start if still needed and enabled
      if (enabled && 
          (sessionId !== currentSessionIdRef.current || currentAvatarIdRef.current !== avatarId)) {
        await startAvatarSession();
      }
    }, 500); // Increased debounce to 500ms to avoid rapid session creation
    
  } else if (enabled && !sessionActive && !isInitializing) {
    // Initial start when enabled
    console.log("üöÄ Initial avatar start");
    startAvatarSession();
  } else if (!enabled && sessionActive) {
    // Immediately end session when disabled to save credits
    console.log("üí∞ Component disabled - ending session to save credits");
    endSession();
  }
  
  // Set up an auto-cleanup interval to ensure sessions don't run too long
  // This is now handled by the sessionMonitorIntervalRef inside startAvatarSession
  // to ensure it's properly cleaned up and restarted with each new session
  
  return () => {
    if (timeoutId) {
      clearTimeout(timeoutId);
    }
    
    // Clear all intervals and timeouts to prevent memory leaks
    if (sessionMonitorIntervalRef.current) {
      clearInterval(sessionMonitorIntervalRef.current);
      sessionMonitorIntervalRef.current = null;
    }
    
    // Always end session on unmount to save credits
    console.log("üí∞ Component unmounting - ending session to save credits");
    endSession();
  };
}, [enabled, sessionId, avatarId]); // Combined dependencies

// Cleanup function for avatar session with aggressive credit saving
async function cleanupAvatar() {
  console.log("üîÑ Starting avatar session cleanup to save credits...");
  setSessionCleanupInProgress(true);
  isCleaningUpRef.current = true;
  
  // Clear session monitoring interval
  if (sessionMonitorIntervalRef.current) {
    clearInterval(sessionMonitorIntervalRef.current);
    sessionMonitorIntervalRef.current = null;
  }

  try {
    // Clear any WebSocket check intervals first
    if (wsIntervalRef.current) {
      clearInterval(wsIntervalRef.current);
    }
    
    // Stop voice chat first if it's active
    if (actualAvatarRef.current) {
      try {
        // Try to gracefully handle voice chat cleanup
        try {
          console.log("üîá Stopping voice chat to save credits...");
          // Mark voice chat as inactive to prevent further audio processing
          voiceChatActiveRef.current = false;
          
          // The SDK doesn't have a stopVoiceChat method in its types
          // But we can try to access it anyway as a workaround
          if (actualAvatarRef.current && typeof (actualAvatarRef.current as any).stopVoiceChat === 'function') {
            await (actualAvatarRef.current as any).stopVoiceChat();
            console.log("‚úÖ Voice chat stopped via method");

  // Handle voice enabled changes with proper WebSocket connection check
  useEffect(() => {
    if (sessionActive && actualAvatarRef.current) {
      if (voiceEnabled && actualAvatarRef.current) {
        // Add delay to ensure WebSocket is fully connected before starting voice chat
        const startVoiceChatWithDelay = async () => {
          // Wait longer to ensure WebSocket is fully established
          console.log("‚è±Ô∏è Waiting for WebSocket connection to be ready...");
          await new Promise(resolve => setTimeout(resolve, 3000));
          
          // Check if avatar is still valid before proceeding
          if (!actualAvatarRef.current || isCleaningUpRef.current) {
            console.log("‚ö†Ô∏è Avatar no longer valid or cleanup in progress, skipping voice chat");
            return;
          }
          
          try {            
            console.log("üé§ Starting voice chat...");
            await actualAvatarRef.current.startVoiceChat({
              useSilencePrompt: false
            });
            
            // Mark voice chat as active
            voiceChatActiveRef.current = true;
            console.log("‚úÖ Voice chat started successfully");
            
            // Set up a periodic check to monitor WebSocket state
            if (wsIntervalRef.current) {
              clearInterval(wsIntervalRef.current);
            }
            
            const wsCheckInterval = setInterval(() => {
              // If avatar is no longer valid or cleanup is in progress, stop checking
              if (!actualAvatarRef.current || isCleaningUpRef.current) {
                clearInterval(wsCheckInterval);
                wsIntervalRef.current = null;
                return;
              }
              
              // If session has changed, clear the interval
              if (currentSessionIdRef.current !== sessionId) {
                clearInterval(wsCheckInterval);
                wsIntervalRef.current = null;
                return;
              }
            }, 5000);
            
            // Store the interval ID for cleanup
            wsIntervalRef.current = wsCheckInterval;
            
          } catch (error: unknown) {
            const err = error as Error;
            console.error("‚ùå Failed to start voice chat:", err);
            
            // If error is about WebSocket state, try again with longer delay
            if (err.message && err.message.includes("WebSocket")) {
              console.log("‚è≥ WebSocket not ready, retrying in 3 seconds...");
              await new Promise(resolve => setTimeout(resolve, 3000));
              
              // Check again if avatar is still valid
              if (!actualAvatarRef.current || isCleaningUpRef.current) {
                console.log("‚ö†Ô∏è Avatar no longer valid or cleanup in progress, skipping voice chat retry");
                return;
              }
              
              try {
                await actualAvatarRef.current.startVoiceChat({
                  useSilencePrompt: false
                });
                voiceChatActiveRef.current = true;
                console.log("‚úÖ Voice chat started successfully on second attempt");
              } catch (retryError: unknown) {
                const retryErr = retryError as Error;
                console.error("‚ùå Failed to start voice chat on retry:", retryErr);
                console.log("üîá Disabling voice chat due to persistent errors");
              }
            }
          }
        };
        
        startVoiceChatWithDelay();
      } else if (!voiceEnabled && actualAvatarRef.current && voiceChatActiveRef.current) {
        // Stop voice chat if it was previously enabled
        const stopVoiceChat = async () => {
          try {
            console.log("üîá Stopping voice chat due to voiceEnabled change...");
            // Mark voice chat as inactive to prevent further audio processing
            voiceChatActiveRef.current = false;
            
            // The SDK doesn't have a stopVoiceChat method in its types
            // But we can try to access it anyway as a workaround
            if (actualAvatarRef.current && typeof (actualAvatarRef.current as any).stopVoiceChat === 'function') {
              await (actualAvatarRef.current as any).stopVoiceChat();
              console.log("‚úÖ Voice chat stopped via method");
            }
            console.log("‚úÖ Voice chat deactivated");
          } catch (error: unknown) {
            const err = error as Error;
            console.error("‚ùå Failed to stop voice chat:", err);
          }
        };
        
        stopVoiceChat();
      }
    }
  }, [voiceEnabled, sessionActive, sessionId]);

  useEffect(() => {
    if (stream && mediaStream.current) {
      try {
        console.log("üîÑ Setting video srcObject with stream", typeof stream);
        mediaStream.current.srcObject = stream;
        
        // Add error handling for video playback
        mediaStream.current.onloadedmetadata = () => {
          console.log("üìπ Video metadata loaded, attempting to play");
          mediaStream.current!.play()
            .then(() => {
              console.log("‚úÖ Video playing successfully");
              // Hide fallback when stream is playing
              setShowFallback(false);
            })
            .catch((err: any) => {
              console.error("‚ùå Error playing video:", err);
              // If autoplay is prevented, show a play button or fallback
              if (err.name === "NotAllowedError") {
                console.log("‚ö†Ô∏è Autoplay prevented by browser");
              }
            });
        };
        
        // Add error handler for stream errors
        mediaStream.current.onerror = (err: any) => {
          console.error("‚ùå Video element error:", err);
        };
      } catch (err: any) {
        console.error("‚ùå Error setting srcObject:", err);
      }
    }
  }, [stream, mediaStream]);

  return (
    <div className="w-full h-full bg-[#2D3B4F] rounded-lg overflow-hidden relative">
      {enabled ? (
        <>
          {/* Loading state with better UX */}
          {(isLoadingSession || sessionCleanupInProgress) && !avatarFailed && (
            <div className="absolute inset-0 flex flex-col items-center justify-center text-white bg-[#2D3B4F] z-10">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mb-4"></div>
              <div className="text-xl mb-2">
                {sessionCleanupInProgress ? 'Switching avatar...' : 'Loading avatar...'}
              </div>
              {!sessionCleanupInProgress && (
                <>
                  <div className="text-sm text-gray-400">Using {heygenAvatarId}</div>
                  <div className="text-xs text-gray-500 mt-2">This usually takes 3-5 seconds</div>
                </>
              )}
            </div>
          )}

          {/* Video stream when available */}
          <video
            ref={mediaStream}
            autoPlay
            playsInline
            className={`w-full h-full object-cover ${
              stream && !showFallback ? 'opacity-100' : 'opacity-0'
            } transition-opacity duration-500`}
            style={{ display: stream && !showFallback ? 'block' : 'none' }}
          >
            <track kind="captions" />
          </video>

          {/* Fallback image - Always rendered but hidden when stream is active */}
          <div 
            className={`absolute inset-0 w-full h-full flex flex-col items-center justify-center ${
              (!stream || showFallback) && !isLoadingSession ? 'opacity-100' : 'opacity-0'
            } transition-opacity duration-500`}
            style={{ display: (!stream || showFallback) && !isLoadingSession ? 'flex' : 'none' }}
          >
            <img 
              src={fallbackImagePath} 
              alt="Agent" 
              className="w-full h-full object-cover"
            />
            {avatarFailed && (
              <div className="absolute bottom-4 left-0 right-0 text-center">
                <div className="bg-black bg-opacity-70 text-yellow-400 text-sm p-2 rounded mx-4">
                  Using fallback image (Avatar temporarily unavailable)
                </div>
              </div>
            )}
          </div>
        </>
      ) : (
        <div className="w-full h-full flex items-center justify-center text-white">
          <p className="text-xl">Avatar is disabled</p>
        </div>
      )}
    </div>
  );
};

export default InteractiveAvatar;