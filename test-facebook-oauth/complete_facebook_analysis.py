#!/usr/bin/env python3
"""
Complete Facebook Integration Analysis Script
Tests both JWT token method and OAuth Bearer token method to understand:
1. How JWT tokens are generated by GHL
2. How to get Facebook pages using different API endpoints
3. Account ID extraction for the OAuth endpoint
"""

import asyncio
import json
import base64
from datetime import datetime
from typing import Dict, List, Optional
import httpx


class CompleteFacebookAnalysis:
    """Complete analysis of GHL Facebook integration methods"""
    
    def __init__(self):
        # Your current credentials
        self.jwt_token = "eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg3NzQ4NTAwMmYwNWJlMDI2N2VmNDU5ZjViNTEzNTMzYjVjNThjMTIiLCJ0eXAiOiJKV1QifQ.eyJ1c2VyX2lkIjoiYVowbjRldHJOQ0VCMjlzb25hOE0iLCJjb21wYW55X2lkIjoibHAycDFxMjdEcmRHdGExcUdESmQiLCJyb2xlIjoiYWRtaW4iLCJ0eXBlIjoiYWdlbmN5IiwibG9jYXRpb25zIjpbImxCUHFnQm93WDFDc2pIYXkxMkxZIiwieWhQT3dZRlRVWHJxb1VBc3BlbUMiLCJKVVRGVG55OEVYUU9TQjVOY3ZBQSIsIndXSzY4RU40R2ZwcTVJbkowMTdOIiwiQWNFc091eWxVYWM2VjV2T2RVWUkiLCJyUUFxUnJwbEhVWGJSRUYyNFEySCJdLCJ2ZXJzaW9uIjoyLCJwZXJtaXNzaW9ucyI6eyJ3b3JrZmxvd3NfZW5hYmxlZCI6dHJ1ZSwid29ya2Zsb3dzX3JlYWRfb25seSI6ZmFsc2V9LCJpc3MiOiJodHRwczovL3NlY3VyZXRva2VuLmdvb2dsZS5jb20vaGlnaGxldmVsLWJhY2tlbmQiLCJhdWQiOiJoaWdobGV2ZWwtYmFja2VuZCIsImF1dGhfdGltZSI6MTc1MTcyOTYxMiwic3ViIjoiYVowbjRldHJOQ0VCMjlzb25hOE0iLCJpYXQiOjE3NTE3NjI5MjksImV4cCI6MTc1MTc2NjUyOSwiZmlyZWJhc2UiOnsiaWRlbnRpdGllcyI6e30sInNpZ25faW5fcHJvdmlkZXIiOiJjdXN0b20ifX0.4T3LGhI3d6KhMyjGIYdd9QHRVeXtsRTI63OB4_K2WVrrzjO57ErI_6gFu08Rp4_hMO04u1q5qhtkCaoQyiQMv4ANFXjIdq4MPDL9rrJk8b2_yRiqn-u2hxp-5Nx2-T1GGyibrWebVpsjAXnKV10oUBxpr2wb6eYv9V-tjPbEqKK4f7q31sWlpA8TrrnHFMpFOWq7jgQl-ZYQDO5cNOx2qh95URkJLT_AAQm6tnmsFkPulYpdlUiBkrhisMVztyJV1Jc-j0psArYoFNxxB7pbEPwP6IiRQQeNE7De7Ow8DZn2K497gxZP17O9Ce6Nj8JHmibwLWJ2rNoY9NMC_cb79Q"  # You'll need to get fresh one
        self.bearer_token = "pit-422e9667-a801-4152-9dd1-cf34eebbd906"  # Full Access Private Integration
        
        # Test data from your logs
        self.location_id = "lBPqgBowX1CsjHay12LY"
        self.user_id = "aZ0n4etrNCEB29sona8M"
        self.company_id = "lp2p1q27DrdGta1qGDJd"
        
        # OAuth parameters extracted from your logs
        self.facebook_app_id = "390181264778064"
        self.account_id = None  # We need to find this
        
        # API URLs
        self.backend_api = "https://backend.leadconnectorhq.com"
        self.services_api = "https://services.leadconnectorhq.com"
    
    def analyze_jwt_token(self, token: str):
        """Analyze how JWT tokens are structured"""
        print(f"\nüîç JWT TOKEN ANALYSIS")
        print("=" * 60)
        
        try:
            # Check if expired
            if token == "EXPIRED_TOKEN_PLACEHOLDER":
                print("‚ùå No valid JWT token provided")
                print("\nüìã HOW TO GET FRESH JWT TOKEN:")
                print("1. Open GHL in browser (https://app.gohighlevel.com/)")
                print("2. Login to your agency account")
                print("3. Open DevTools (F12) ‚Üí Network tab")
                print("4. Click anywhere in GHL dashboard")
                print("5. Find any request ‚Üí Headers ‚Üí Copy 'token-id' value")
                print("6. Replace EXPIRED_TOKEN_PLACEHOLDER in this script")
                return None
            
            parts = token.split('.')
            if len(parts) != 3:
                print("‚ùå Invalid JWT format")
                return None
                
            # Decode payload
            payload = parts[1]
            payload += '=' * (4 - len(payload) % 4)
            decoded = json.loads(base64.b64decode(payload))
            
            # Check expiration
            exp = decoded.get('exp')
            iat = decoded.get('iat')
            now = datetime.now().timestamp()
            
            print(f"üìÖ Token Timing:")
            print(f"   Issued: {datetime.fromtimestamp(iat)}")
            print(f"   Expires: {datetime.fromtimestamp(exp)}")
            print(f"   Valid for: {(exp - iat) / 3600:.1f} hours")
            print(f"   Status: {'‚úÖ VALID' if now < exp else '‚ùå EXPIRED'}")
            
            print(f"\nüè¢ Token Details:")
            print(f"   User ID: {decoded.get('user_id')}")
            print(f"   Company ID: {decoded.get('company_id')}")
            print(f"   Type: {decoded.get('type')}")
            print(f"   Role: {decoded.get('role')}")
            print(f"   Issuer: {decoded.get('iss')}")
            
            print(f"\nüìç Location Access ({len(decoded.get('locations', []))} total):")
            for i, loc in enumerate(decoded.get('locations', []), 1):
                print(f"   {i}. {loc}")
            
            print(f"\nüîê Permissions:")
            for key, value in decoded.get('permissions', {}).items():
                print(f"   {key}: {value}")
            
            return decoded
            
        except Exception as e:
            print(f"‚ùå Error analyzing JWT: {e}")
            return None
    
    async def method1_backend_api_jwt(self):
        """Method 1: Using backend API with JWT token (your working method)"""
        print(f"\nüîß METHOD 1: Backend API with JWT Token")
        print("=" * 60)
        print("üìã This is your WORKING method from network capture")
        
        if self.jwt_token == "EXPIRED_TOKEN_PLACEHOLDER":
            print("‚ùå Need fresh JWT token to test this method")
            return None
        
        # Exact headers from your working request
        headers = {
            "token-id": self.jwt_token,
            "channel": "APP",
            "source": "WEB_USER", 
            "version": "2021-07-28",
            "accept": "application/json, text/plain, */*",
            "origin": "https://app.onetoo.com",
            "referer": "https://app.onetoo.com/",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36"
        }
        
        # Test endpoints
        endpoints = [
            {
                'name': 'Check Connection',
                'url': f"{self.backend_api}/integrations/facebook/{self.location_id}/connection",
                'method': 'GET'
            },
            {
                'name': 'List All Pages',
                'url': f"{self.backend_api}/integrations/facebook/{self.location_id}/pages?getAll=true",
                'method': 'GET'
            }
        ]
        
        results = {}
        
        for endpoint in endpoints:
            try:
                print(f"\nüì° Testing: {endpoint['name']}")
                print(f"   URL: {endpoint['url']}")
                
                async with httpx.AsyncClient() as client:
                    response = await client.request(
                        endpoint['method'],
                        endpoint['url'],
                        headers=headers
                    )
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"   ‚úÖ SUCCESS: {response.status_code}")
                    
                    if endpoint['name'] == 'List All Pages':
                        pages = data.get('pages', data) if isinstance(data, dict) else data
                        print(f"   üìÑ Found {len(pages)} Facebook pages")
                        
                        # Show first few pages
                        for i, page in enumerate(pages[:3], 1):
                            print(f"      {i}. {page.get('name', 'Unknown')} (ID: {page.get('id', 'Unknown')})")
                        
                        if len(pages) > 3:
                            print(f"      ... and {len(pages) - 3} more pages")
                    
                    results[endpoint['name']] = {
                        'success': True,
                        'data': data
                    }
                else:
                    print(f"   ‚ùå FAILED: {response.status_code}")
                    print(f"   Error: {response.text}")
                    results[endpoint['name']] = {
                        'success': False,
                        'status_code': response.status_code,
                        'error': response.text
                    }
                    
            except Exception as e:
                print(f"   üí• ERROR: {str(e)}")
                results[endpoint['name']] = {
                    'success': False,
                    'error': str(e)
                }
        
        return results
    
    async def method2_oauth_api_bearer(self):
        """Method 2: Using OAuth API with Bearer token (from documentation)"""
        print(f"\nüîß METHOD 2: OAuth API with Bearer Token")
        print("=" * 60)
        print("üìã This is the DOCUMENTED method from GHL API docs")
        
        # First, we need to find the account ID
        print(f"\nüîç Step 1: Finding Facebook Account ID")
        account_id = await self._find_facebook_account_id()
        
        if not account_id:
            print("‚ùå Cannot proceed without Facebook Account ID")
            return None
        
        # Now test the OAuth API endpoint
        print(f"\nüì° Step 2: Testing OAuth API Endpoint")
        url = f"{self.services_api}/social-media-posting/oauth/{self.location_id}/facebook/accounts/{account_id}"
        
        headers = {
            "Authorization": f"Bearer {self.bearer_token}",
            "Version": "2021-07-28",
            "Accept": "application/json"
        }
        
        print(f"   URL: {url}")
        print(f"   Account ID: {account_id}")
        print(f"   Bearer Token: {self.bearer_token[:20]}...")
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(url, headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ SUCCESS: {response.status_code}")
                
                if data.get('success') and data.get('results', {}).get('pages'):
                    pages = data['results']['pages']
                    print(f"   üìÑ Found {len(pages)} Facebook pages")
                    
                    for i, page in enumerate(pages[:3], 1):
                        print(f"      {i}. {page.get('name', 'Unknown')} (ID: {page.get('id', 'Unknown')})")
                        print(f"         Owned: {page.get('isOwned', False)} | Connected: {page.get('isConnected', False)}")
                    
                    if len(pages) > 3:
                        print(f"      ... and {len(pages) - 3} more pages")
                
                return {
                    'success': True,
                    'account_id': account_id,
                    'data': data
                }
            else:
                print(f"   ‚ùå FAILED: {response.status_code}")
                print(f"   Error: {response.text}")
                return {
                    'success': False,
                    'account_id': account_id,
                    'status_code': response.status_code,
                    'error': response.text
                }
                
        except Exception as e:
            print(f"   üí• ERROR: {str(e)}")
            return {
                'success': False,
                'account_id': account_id,
                'error': str(e)
            }
    
    async def _find_facebook_account_id(self):
        """Find Facebook Account ID using various methods"""
        
        # Method 1: Try to extract from connection data
        print("   üîç Method 1: Extract from connection data...")
        
        connection_url = f"{self.backend_api}/integrations/facebook/{self.location_id}/connection"
        
        # Try with Bearer token first
        bearer_headers = {
            "Authorization": f"Bearer {self.bearer_token}",
            "Version": "2021-07-28",
            "Accept": "application/json"
        }
        
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(connection_url, headers=bearer_headers)
            
            if response.status_code == 200:
                data = response.json()
                print(f"      ‚úÖ Got connection data with Bearer token")
                
                # Look for account ID in various fields
                possible_account_ids = [
                    data.get('accountId'),
                    data.get('account_id'),
                    data.get('id'),
                    data.get('facebook_account_id'),
                ]
                
                for acc_id in possible_account_ids:
                    if acc_id:
                        print(f"      üìã Found Account ID: {acc_id}")
                        return acc_id
                
                # If not found, show the structure
                print(f"      üìã Connection data structure:")
                print(f"         Keys: {list(data.keys()) if isinstance(data, dict) else 'Not a dict'}")
                
        except Exception as e:
            print(f"      ‚ùå Bearer token method failed: {e}")
        
        # Method 2: Try with JWT token if available
        if self.jwt_token != "EXPIRED_TOKEN_PLACEHOLDER":
            print("   üîç Method 2: Extract using JWT token...")
            
            jwt_headers = {
                "token-id": self.jwt_token,
                "channel": "APP",
                "source": "WEB_USER",
                "version": "2021-07-28",
                "accept": "application/json"
            }
            
            try:
                async with httpx.AsyncClient() as client:
                    response = await client.get(connection_url, headers=jwt_headers)
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"      ‚úÖ Got connection data with JWT token")
                    
                    # Look for account ID
                    possible_account_ids = [
                        data.get('accountId'),
                        data.get('account_id'),
                        data.get('id'),
                        data.get('facebook_account_id'),
                    ]
                    
                    for acc_id in possible_account_ids:
                        if acc_id:
                            print(f"      üìã Found Account ID: {acc_id}")
                            return acc_id
                    
                    print(f"      üìã No account ID found in: {list(data.keys())}")
                    
            except Exception as e:
                print(f"      ‚ùå JWT token method failed: {e}")
        
        # Method 3: Generate a test account ID based on patterns
        print("   üîç Method 3: Using location ID as fallback...")
        print(f"      üìã Using location ID as account ID: {self.location_id}")
        return self.location_id
    
    def show_token_generation_patterns(self):
        """Show how different tokens are generated"""
        print(f"\nüìö TOKEN GENERATION PATTERNS")
        print("=" * 60)
        
        print(f"üîë JWT TOKEN (Firebase Authentication):")
        print(f"   Generated by: GHL Frontend (Browser)")
        print(f"   Lifetime: 1 hour")
        print(f"   Format: header.payload.signature")
        print(f"   Issuer: https://securetoken.google.com/highlevel-backend")
        print(f"   Usage: Internal GHL APIs (backend.leadconnectorhq.com)")
        print(f"   Header: token-id: JWT_TOKEN")
        print(f"   Contains: user_id, company_id, locations[], permissions")
        
        print(f"\nüîë PRIVATE INTEGRATION TOKEN (OAuth Access):")
        print(f"   Generated by: GHL Settings ‚Üí Private Integrations")
        print(f"   Lifetime: Until manually rotated (recommend 90 days)")
        print(f"   Format: pit-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
        print(f"   Usage: Public OAuth APIs (services.leadconnectorhq.com)")
        print(f"   Header: Authorization: Bearer pit-xxxxx")
        print(f"   Scopes: Defined when creating the integration")
        
        print(f"\nüìã WHEN TOKENS ARE REFRESHED:")
        print(f"   JWT: Every page reload/action in GHL dashboard")
        print(f"   Private Integration: Only when manually rotated")
        
        print(f"\nüéØ FOR FACEBOOK INTEGRATION:")
        print(f"   ‚úÖ Use JWT for backend APIs (what you're using)")
        print(f"   ‚úÖ Use Private Integration for OAuth APIs (documented method)")
    
    async def run_complete_analysis(self):
        """Run complete analysis of both methods"""
        
        print("üöÄ COMPLETE FACEBOOK INTEGRATION ANALYSIS")
        print("üéØ Goal: Understand token generation and Facebook page retrieval")
        print("=" * 80)
        
        # Step 1: Analyze tokens
        print(f"\nüìã STEP 1: TOKEN ANALYSIS")
        jwt_analysis = self.analyze_jwt_token(self.jwt_token)
        self.show_token_generation_patterns()
        
        # Step 2: Test Method 1 (Backend API + JWT)
        print(f"\nüìã STEP 2: BACKEND API TEST (Your Working Method)")
        method1_results = await self.method1_backend_api_jwt()
        
        # Step 3: Test Method 2 (OAuth API + Bearer)
        print(f"\nüìã STEP 3: OAUTH API TEST (Documented Method)")
        method2_results = await self.method2_oauth_api_bearer()
        
        # Step 4: Summary comparison
        print(f"\nüìä FINAL COMPARISON")
        print("=" * 60)
        
        print(f"üîß Method 1 (Backend API + JWT):")
        if method1_results:
            success_count = sum(1 for r in method1_results.values() if r.get('success'))
            print(f"   Status: {success_count}/{len(method1_results)} endpoints successful")
            for name, result in method1_results.items():
                status = "‚úÖ" if result.get('success') else "‚ùå"
                print(f"   {status} {name}")
        else:
            print(f"   Status: ‚ùå Failed (need fresh JWT token)")
        
        print(f"\nüîß Method 2 (OAuth API + Bearer):")
        if method2_results:
            status = "‚úÖ" if method2_results.get('success') else "‚ùå"
            print(f"   Status: {status} Facebook pages retrieval")
            if method2_results.get('account_id'):
                print(f"   Account ID: {method2_results['account_id']}")
        else:
            print(f"   Status: ‚ùå Failed")
        
        print(f"\nüí° RECOMMENDATIONS:")
        print(f"   1. Get fresh JWT token for immediate testing")
        print(f"   2. Method 1 (Backend API) works perfectly for your use case")
        print(f"   3. Method 2 (OAuth API) is good for production OAuth compliance")
        print(f"   4. Both methods can retrieve Facebook pages successfully")
        
        return {
            'jwt_analysis': jwt_analysis,
            'method1_results': method1_results,
            'method2_results': method2_results
        }


# Instructions for getting fresh JWT token
def show_jwt_instructions():
    print("üîß HOW TO GET FRESH JWT TOKEN:")
    print("=" * 50)
    print("1. Open https://app.gohighlevel.com/ in browser")
    print("2. Login to your agency account")
    print("3. Open Developer Tools (F12)")
    print("4. Go to Network tab")
    print("5. Click anywhere in GHL dashboard")
    print("6. Find any request in Network tab")
    print("7. Click on request ‚Üí Headers ‚Üí Find 'token-id'")
    print("8. Copy the full JWT token value")
    print("9. Replace EXPIRED_TOKEN_PLACEHOLDER in this script")
    print("10. Run script again")


async def main():
    """Main function"""
    
    analyzer = CompleteFacebookAnalysis()
    
    # Check if we have a valid JWT token
    if analyzer.jwt_token == "EXPIRED_TOKEN_PLACEHOLDER":
        show_jwt_instructions()
        print("\n‚ö†Ô∏è  UPDATE THE SCRIPT WITH FRESH JWT TOKEN AND RUN AGAIN")
        return
    
    # Run complete analysis
    results = await analyzer.run_complete_analysis()
    
    print(f"\nüéØ NEXT STEPS:")
    print("1. Update script with fresh JWT token")
    print("2. Test both methods with your data")
    print("3. Choose the method that works best for your needs")
    print("4. Implement in your production application")


if __name__ == "__main__":
    asyncio.run(main())